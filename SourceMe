#!/bin/bash

# console colors to make stuff look nice
cyan=`tput setaf 6`
blue=`tput setaf 4`
magenta=`tput setaf 5`
standout=`tput smso`
nostandout=`tput rmso`
bold=`tput bold`
clearf=`tput sgr0`

if [[ -z "$MICROSERVICE_PROJECT_HOME" ]]; then
    export MICROSERVICE_PROJECT_HOME="$( cd "$( dirname $0 )" && pwd )"
    NODEJS_BIN="${MICROSERVICE_PROJECT_HOME}/node_modules/.bin"
    PROJECT_BIN="${MICROSERVICE_PROJECT_HOME}/bin"
    export PATH="${PROJECT_BIN}:${NODEJS_BIN}:${PATH}"
fi

nvm install  # installs the correct version of NodeJS to run this microservice
npm install  # installs the dependencies for this microservice

# used by template-microservice, dev-mongo, and PM2
# referenced in docker-compose.yml, pm2.config.js, and ./config/default.json
test -d logs || mkdir logs

# used by dev-mongo
# referenced in docker-compose.yml 
test -d data || mkdir data


#
# --- PM2 Utilities -----------------------------------------------------------
#
function pcycle {
    procId=${1:-0}
    pm2 stop $procId
    if [[ $? -eq 0 ]]; then
        pm2 flush --silent
        pm2 start $procId
        if [[ ! -z "$2" ]]; then
            pm2 logs $procId --lines $2
        else
            pm2 logs $procId
        fi
    fi
}

function plogs {
  procId=${1:-0}
  if [[ ! -z "$2" ]]; then
    pm2 logs $procId --lines $2
  else
    pm2 logs $procId
  fi
}

function pkill {
    procId=${1:-0}
    pm2 stop --silent $procId && pm2 flush && pm2 delete --silent $procId
}

function pnuke {
    pkill all
}

#
# --- Docker Utilities --------------------------------------------------------
#

alias dps='docker ps'
alias dcids='docker ps --format "{{.ID}}"' # get list of container IDs 
alias dnuke='dkill $(dcids)'   # kill all the running containers
alias dlogs='docker logs'      
alias dls='docker images'
alias drmi='docker rmi'

# prunes the the docker image cache, leaving 
# images only for running containers
alias dprune='docker system prune -a'   

alias dc='docker-compose' # also known to be an arbitrary precision calculator
alias dcup='dc up -d'     # bring up one or all containers

# kills only the containers managed by docker-compose.yml 
# and then removes all the cached images associated with 
# said containers
alias dcnuke='dc down --rmi all --remove-orphans'

# -- takes a space-delimited list of container IDs, names, or tags (or mixed!)
function dkill {
    while [[ ! -z "$1" ]]; do
        docker stop $1 && docker rm $1
        shift
    done
}

#
# --- Overall process management functions ------------------------------------
#

# using this network name is a real hack! gross!!!
alias dmongo='docker run -it --rm --network nodejsdockertemplate_default --link dev-mongo:mongo mongo mongo dev-mongo/template_microservice -u janie -p'

function devnuke {
    echo "${cyan}Killing all PM2 process ... ${clearf}"
    silence=`pnuke`

    echo "${cyan}Killing all running Docker containers ... ${clearf}"
    silence=`dnuke`

    echo "${cyan}Removing all independent Docker images ... ${clearf}"
    dprune

    rm -rf node_modules
    rm -rf logs 
    rm -rf data
    rm -rf sandbox
    echo "${cyan}${bold}#"
    echo "# ${standout}REMINDER:${nostandout} the ephemeral files, docker containers, and docker images have been"
    echo "#           removed. Exit this shell session to destroy the environment" 
    echo "#           variables, aliases, and functions     ${magenta}:) ${cyan}"
    echo "# ${clearf}"
}

#
# --- Exit Messages -----------------------------------------------------------
#
echo "${bold}${cyan}#"
echo "# ${standout}REMEMBER${nostandout} to create the dev-mongo image (with ${blue}./bin/init-mongodb.sh${cyan}), and then "
echo "#          start the container if necessary, with '${blue}dcup dev-mongo${cyan}'   ${magenta}  :)${cyan}"
echo "#${clearf}"
